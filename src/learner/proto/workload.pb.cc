// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: learner/proto/workload.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "learner/proto/workload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* Workload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Workload_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_learner_2fproto_2fworkload_2eproto() {
  protobuf_AddDesc_learner_2fproto_2fworkload_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "learner/proto/workload.proto");
  GOOGLE_CHECK(file != NULL);
  Workload_descriptor_ = file->message_type(0);
  static const int Workload_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workload, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workload, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workload, shuffle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workload, replica_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workload, finished_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workload, all_is_done_),
  };
  Workload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Workload_descriptor_,
      Workload::default_instance_,
      Workload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Workload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Workload));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_learner_2fproto_2fworkload_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Workload_descriptor_, &Workload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_learner_2fproto_2fworkload_2eproto() {
  delete Workload::default_instance_;
  delete Workload_reflection_;
}

void protobuf_AddDesc_learner_2fproto_2fworkload_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_data_2fproto_2fdata_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034learner/proto/workload.proto\022\002PS\032\025data"
    "/proto/data.proto\"\216\001\n\010Workload\022\n\n\002id\030\001 \001"
    "(\005\022\034\n\004data\030\002 \001(\0132\016.PS.DataConfig\022\026\n\007shuf"
    "fle\030\003 \001(\010:\005false\022\022\n\007replica\030\004 \001(\005:\0011\022\020\n\010"
    "finished\030\006 \003(\005\022\032\n\013all_is_done\030\005 \001(\010:\005fal"
    "se", 202);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "learner/proto/workload.proto", &protobuf_RegisterTypes);
  Workload::default_instance_ = new Workload();
  Workload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_learner_2fproto_2fworkload_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_learner_2fproto_2fworkload_2eproto {
  StaticDescriptorInitializer_learner_2fproto_2fworkload_2eproto() {
    protobuf_AddDesc_learner_2fproto_2fworkload_2eproto();
  }
} static_descriptor_initializer_learner_2fproto_2fworkload_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Workload::kIdFieldNumber;
const int Workload::kDataFieldNumber;
const int Workload::kShuffleFieldNumber;
const int Workload::kReplicaFieldNumber;
const int Workload::kFinishedFieldNumber;
const int Workload::kAllIsDoneFieldNumber;
#endif  // !_MSC_VER

Workload::Workload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Workload::InitAsDefaultInstance() {
  data_ = const_cast< ::PS::DataConfig*>(&::PS::DataConfig::default_instance());
}

Workload::Workload(const Workload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Workload::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  data_ = NULL;
  shuffle_ = false;
  replica_ = 1;
  all_is_done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Workload::~Workload() {
  SharedDtor();
}

void Workload::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void Workload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Workload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Workload_descriptor_;
}

const Workload& Workload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_learner_2fproto_2fworkload_2eproto();
  return *default_instance_;
}

Workload* Workload::default_instance_ = NULL;

Workload* Workload::New() const {
  return new Workload;
}

void Workload::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_data()) {
      if (data_ != NULL) data_->::PS::DataConfig::Clear();
    }
    shuffle_ = false;
    replica_ = 1;
    all_is_done_ = false;
  }
  finished_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Workload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .PS.DataConfig data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shuffle;
        break;
      }

      // optional bool shuffle = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shuffle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shuffle_)));
          set_has_shuffle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_replica;
        break;
      }

      // optional int32 replica = 4 [default = 1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replica:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replica_)));
          set_has_replica();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_all_is_done;
        break;
      }

      // optional bool all_is_done = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_is_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_is_done_)));
          set_has_all_is_done();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_finished;
        break;
      }

      // repeated int32 finished = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_finished())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_finished())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_finished;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Workload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .PS.DataConfig data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  // optional bool shuffle = 3 [default = false];
  if (has_shuffle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shuffle(), output);
  }

  // optional int32 replica = 4 [default = 1];
  if (has_replica()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->replica(), output);
  }

  // optional bool all_is_done = 5 [default = false];
  if (has_all_is_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->all_is_done(), output);
  }

  // repeated int32 finished = 6;
  for (int i = 0; i < this->finished_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->finished(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Workload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .PS.DataConfig data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  // optional bool shuffle = 3 [default = false];
  if (has_shuffle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->shuffle(), target);
  }

  // optional int32 replica = 4 [default = 1];
  if (has_replica()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->replica(), target);
  }

  // optional bool all_is_done = 5 [default = false];
  if (has_all_is_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->all_is_done(), target);
  }

  // repeated int32 finished = 6;
  for (int i = 0; i < this->finished_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->finished(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Workload::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .PS.DataConfig data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional bool shuffle = 3 [default = false];
    if (has_shuffle()) {
      total_size += 1 + 1;
    }

    // optional int32 replica = 4 [default = 1];
    if (has_replica()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replica());
    }

    // optional bool all_is_done = 5 [default = false];
    if (has_all_is_done()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 finished = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->finished_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->finished(i));
    }
    total_size += 1 * this->finished_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Workload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Workload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Workload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Workload::MergeFrom(const Workload& from) {
  GOOGLE_CHECK_NE(&from, this);
  finished_.MergeFrom(from.finished_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      mutable_data()->::PS::DataConfig::MergeFrom(from.data());
    }
    if (from.has_shuffle()) {
      set_shuffle(from.shuffle());
    }
    if (from.has_replica()) {
      set_replica(from.replica());
    }
    if (from.has_all_is_done()) {
      set_all_is_done(from.all_is_done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Workload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workload::CopyFrom(const Workload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workload::IsInitialized() const {

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void Workload::Swap(Workload* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(shuffle_, other->shuffle_);
    std::swap(replica_, other->replica_);
    finished_.Swap(&other->finished_);
    std::swap(all_is_done_, other->all_is_done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Workload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Workload_descriptor_;
  metadata.reflection = Workload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
