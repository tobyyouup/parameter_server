// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: learner/proto/workload.proto

#ifndef PROTOBUF_learner_2fproto_2fworkload_2eproto__INCLUDED
#define PROTOBUF_learner_2fproto_2fworkload_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "data/proto/data.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_learner_2fproto_2fworkload_2eproto();
void protobuf_AssignDesc_learner_2fproto_2fworkload_2eproto();
void protobuf_ShutdownFile_learner_2fproto_2fworkload_2eproto();

class Workload;

// ===================================================================

class Workload : public ::google::protobuf::Message {
 public:
  Workload();
  virtual ~Workload();

  Workload(const Workload& from);

  inline Workload& operator=(const Workload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Workload& default_instance();

  void Swap(Workload* other);

  // implements Message ----------------------------------------------

  Workload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Workload& from);
  void MergeFrom(const Workload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional .PS.DataConfig data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::PS::DataConfig& data() const;
  inline ::PS::DataConfig* mutable_data();
  inline ::PS::DataConfig* release_data();
  inline void set_allocated_data(::PS::DataConfig* data);

  // optional bool shuffle = 3 [default = false];
  inline bool has_shuffle() const;
  inline void clear_shuffle();
  static const int kShuffleFieldNumber = 3;
  inline bool shuffle() const;
  inline void set_shuffle(bool value);

  // optional int32 replica = 4 [default = 1];
  inline bool has_replica() const;
  inline void clear_replica();
  static const int kReplicaFieldNumber = 4;
  inline ::google::protobuf::int32 replica() const;
  inline void set_replica(::google::protobuf::int32 value);

  // repeated int32 finished = 6;
  inline int finished_size() const;
  inline void clear_finished();
  static const int kFinishedFieldNumber = 6;
  inline ::google::protobuf::int32 finished(int index) const;
  inline void set_finished(int index, ::google::protobuf::int32 value);
  inline void add_finished(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      finished() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_finished();

  // optional bool all_is_done = 5 [default = false];
  inline bool has_all_is_done() const;
  inline void clear_all_is_done();
  static const int kAllIsDoneFieldNumber = 5;
  inline bool all_is_done() const;
  inline void set_all_is_done(bool value);

  // @@protoc_insertion_point(class_scope:PS.Workload)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_shuffle();
  inline void clear_has_shuffle();
  inline void set_has_replica();
  inline void clear_has_replica();
  inline void set_has_all_is_done();
  inline void clear_has_all_is_done();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::DataConfig* data_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 replica_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > finished_;
  bool shuffle_;
  bool all_is_done_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_learner_2fproto_2fworkload_2eproto();
  friend void protobuf_AssignDesc_learner_2fproto_2fworkload_2eproto();
  friend void protobuf_ShutdownFile_learner_2fproto_2fworkload_2eproto();

  void InitAsDefaultInstance();
  static Workload* default_instance_;
};
// ===================================================================


// ===================================================================

// Workload

// optional int32 id = 1;
inline bool Workload::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Workload::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Workload::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Workload::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Workload::id() const {
  return id_;
}
inline void Workload::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .PS.DataConfig data = 2;
inline bool Workload::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Workload::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Workload::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Workload::clear_data() {
  if (data_ != NULL) data_->::PS::DataConfig::Clear();
  clear_has_data();
}
inline const ::PS::DataConfig& Workload::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::PS::DataConfig* Workload::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::PS::DataConfig;
  return data_;
}
inline ::PS::DataConfig* Workload::release_data() {
  clear_has_data();
  ::PS::DataConfig* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Workload::set_allocated_data(::PS::DataConfig* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional bool shuffle = 3 [default = false];
inline bool Workload::has_shuffle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Workload::set_has_shuffle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Workload::clear_has_shuffle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Workload::clear_shuffle() {
  shuffle_ = false;
  clear_has_shuffle();
}
inline bool Workload::shuffle() const {
  return shuffle_;
}
inline void Workload::set_shuffle(bool value) {
  set_has_shuffle();
  shuffle_ = value;
}

// optional int32 replica = 4 [default = 1];
inline bool Workload::has_replica() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Workload::set_has_replica() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Workload::clear_has_replica() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Workload::clear_replica() {
  replica_ = 1;
  clear_has_replica();
}
inline ::google::protobuf::int32 Workload::replica() const {
  return replica_;
}
inline void Workload::set_replica(::google::protobuf::int32 value) {
  set_has_replica();
  replica_ = value;
}

// repeated int32 finished = 6;
inline int Workload::finished_size() const {
  return finished_.size();
}
inline void Workload::clear_finished() {
  finished_.Clear();
}
inline ::google::protobuf::int32 Workload::finished(int index) const {
  return finished_.Get(index);
}
inline void Workload::set_finished(int index, ::google::protobuf::int32 value) {
  finished_.Set(index, value);
}
inline void Workload::add_finished(::google::protobuf::int32 value) {
  finished_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Workload::finished() const {
  return finished_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Workload::mutable_finished() {
  return &finished_;
}

// optional bool all_is_done = 5 [default = false];
inline bool Workload::has_all_is_done() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Workload::set_has_all_is_done() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Workload::clear_has_all_is_done() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Workload::clear_all_is_done() {
  all_is_done_ = false;
  clear_has_all_is_done();
}
inline bool Workload::all_is_done() const {
  return all_is_done_;
}
inline void Workload::set_all_is_done(bool value) {
  set_has_all_is_done();
  all_is_done_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_learner_2fproto_2fworkload_2eproto__INCLUDED
