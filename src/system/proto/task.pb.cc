// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system/proto/task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system/proto/task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PS {

namespace {

const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Control_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Control_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Control_Command_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_system_2fproto_2ftask_2eproto() {
  protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "system/proto/task.proto");
  GOOGLE_CHECK(file != NULL);
  Task_descriptor_ = file->message_type(0);
  static const int Task_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, customer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, wait_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, key_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, key_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, has_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, value_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, more_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, ctrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, sgd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, bcd_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Control_descriptor_ = file->message_type(1);
  static const int Control_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, node_),
  };
  Control_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Control_descriptor_,
      Control::default_instance_,
      Control_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Control));
  Control_Command_descriptor_ = Control_descriptor_->enum_type(0);
  DataType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_system_2fproto_2ftask_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Control_descriptor_, &Control::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_system_2fproto_2ftask_2eproto() {
  delete Task::default_instance_;
  delete Task_reflection_;
  delete Control::default_instance_;
  delete Control_reflection_;
}

void protobuf_AddDesc_system_2fproto_2ftask_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PS::protobuf_AddDesc_util_2fproto_2frange_2eproto();
  ::PS::protobuf_AddDesc_data_2fproto_2fdata_2eproto();
  ::PS::protobuf_AddDesc_system_2fproto_2fnode_2eproto();
  ::PS::protobuf_AddDesc_parameter_2fproto_2fparam_2eproto();
  ::PS::protobuf_AddDesc_filter_2fproto_2ffilter_2eproto();
  ::PS::protobuf_AddDesc_learner_2fproto_2fsgd_2eproto();
  ::PS::protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027system/proto/task.proto\022\002PS\032\026util/prot"
    "o/range.proto\032\025data/proto/data.proto\032\027sy"
    "stem/proto/node.proto\032\033parameter/proto/p"
    "aram.proto\032\031filter/proto/filter.proto\032\027l"
    "earner/proto/sgd.proto\032\027learner/proto/bc"
    "d.proto\"\313\003\n\004Task\022\026\n\007control\030\001 \001(\010:\005false"
    "\022\026\n\007request\030\002 \001(\010:\005false\022\023\n\013customer_id\030"
    "\003 \001(\005\022\014\n\004time\030\005 \001(\005\022\021\n\twait_time\030\006 \003(\005\022\036"
    "\n\tkey_range\030\007 \001(\0132\013.PS.PbRange\022\023\n\013key_ch"
    "annel\030\010 \001(\005\022\026\n\007has_key\030\t \001(\010:\005false\022\036\n\010k"
    "ey_type\030\r \001(\0162\014.PS.DataType\022 \n\nvalue_typ"
    "e\030\016 \003(\0162\014.PS.DataType\022 \n\006filter\030\014 \003(\0132\020."
    "PS.FilterConfig\022\023\n\004more\030\020 \001(\010:\005false\022\026\n\004"
    "task\030\017 \003(\0132\010.PS.Task\022\013\n\003msg\030\021 \001(\014\022\031\n\004ctr"
    "l\030\022 \001(\0132\013.PS.Control\022\034\n\005param\030\024 \001(\0132\r.PS"
    ".ParamCall\022\030\n\003sgd\030\025 \001(\0132\013.PS.SGDCall\022\030\n\003"
    "bcd\030\026 \001(\0132\013.PS.BCDCall*\005\010d\020\310\001\"\343\001\n\007Contro"
    "l\022 \n\003cmd\030\001 \002(\0162\023.PS.Control.Command\022\026\n\004n"
    "ode\030\002 \003(\0132\010.PS.Node\"\235\001\n\007Command\022\017\n\013REQUE"
    "ST_APP\020\001\022\021\n\rREGISTER_NODE\020\002\022\017\n\013REPORT_PE"
    "RF\020\003\022\021\n\rREADY_TO_EXIT\020\004\022\014\n\010ADD_NODE\020\n\022\017\n"
    "\013UPDATE_NODE\020\013\022\020\n\014REPLACE_NODE\020\014\022\017\n\013REMO"
    "VE_NODE\020\r\022\010\n\004EXIT\020\016*\220\001\n\010DataType\022\t\n\005OTHE"
    "R\020\000\022\010\n\004INT8\020\001\022\t\n\005INT16\020\002\022\t\n\005INT32\020\003\022\t\n\005I"
    "NT64\020\004\022\t\n\005UINT8\020\005\022\n\n\006UINT16\020\006\022\n\n\006UINT32\020"
    "\007\022\n\n\006UINT64\020\010\022\t\n\005FLOAT\020\t\022\n\n\006DOUBLE\020\n\022\010\n\004"
    "CHAR\020\013", 1046);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "system/proto/task.proto", &protobuf_RegisterTypes);
  Task::default_instance_ = new Task();
  Control::default_instance_ = new Control();
  Task::default_instance_->InitAsDefaultInstance();
  Control::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_system_2fproto_2ftask_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_system_2fproto_2ftask_2eproto {
  StaticDescriptorInitializer_system_2fproto_2ftask_2eproto() {
    protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  }
} static_descriptor_initializer_system_2fproto_2ftask_2eproto_;
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataType_descriptor_;
}
bool DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Task::kControlFieldNumber;
const int Task::kRequestFieldNumber;
const int Task::kCustomerIdFieldNumber;
const int Task::kTimeFieldNumber;
const int Task::kWaitTimeFieldNumber;
const int Task::kKeyRangeFieldNumber;
const int Task::kKeyChannelFieldNumber;
const int Task::kHasKeyFieldNumber;
const int Task::kKeyTypeFieldNumber;
const int Task::kValueTypeFieldNumber;
const int Task::kFilterFieldNumber;
const int Task::kMoreFieldNumber;
const int Task::kTaskFieldNumber;
const int Task::kMsgFieldNumber;
const int Task::kCtrlFieldNumber;
const int Task::kParamFieldNumber;
const int Task::kSgdFieldNumber;
const int Task::kBcdFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
  key_range_ = const_cast< ::PS::PbRange*>(&::PS::PbRange::default_instance());
  ctrl_ = const_cast< ::PS::Control*>(&::PS::Control::default_instance());
  param_ = const_cast< ::PS::ParamCall*>(&::PS::ParamCall::default_instance());
  sgd_ = const_cast< ::PS::SGDCall*>(&::PS::SGDCall::default_instance());
  bcd_ = const_cast< ::PS::BCDCall*>(&::PS::BCDCall::default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  control_ = false;
  request_ = false;
  customer_id_ = 0;
  time_ = 0;
  key_range_ = NULL;
  key_channel_ = 0;
  has_key_ = false;
  key_type_ = 0;
  more_ = false;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ctrl_ = NULL;
  param_ = NULL;
  sgd_ = NULL;
  bcd_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete key_range_;
    delete ctrl_;
    delete param_;
    delete sgd_;
    delete bcd_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    control_ = false;
    request_ = false;
    customer_id_ = 0;
    time_ = 0;
    if (has_key_range()) {
      if (key_range_ != NULL) key_range_->::PS::PbRange::Clear();
    }
    key_channel_ = 0;
    has_key_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    key_type_ = 0;
    more_ = false;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_ctrl()) {
      if (ctrl_ != NULL) ctrl_->::PS::Control::Clear();
    }
    if (has_param()) {
      if (param_ != NULL) param_->::PS::ParamCall::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_sgd()) {
      if (sgd_ != NULL) sgd_->::PS::SGDCall::Clear();
    }
    if (has_bcd()) {
      if (bcd_ != NULL) bcd_->::PS::BCDCall::Clear();
    }
  }
  wait_time_.Clear();
  value_type_.Clear();
  filter_.Clear();
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool control = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &control_)));
          set_has_control();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request;
        break;
      }

      // optional bool request = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &request_)));
          set_has_request();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_customer_id;
        break;
      }

      // optional int32 customer_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_customer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &customer_id_)));
          set_has_customer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wait_time;
        break;
      }

      // repeated int32 wait_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wait_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_wait_time())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_wait_time())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wait_time;
        if (input->ExpectTag(58)) goto parse_key_range;
        break;
      }

      // optional .PS.PbRange key_range = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_range:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_key_channel;
        break;
      }

      // optional int32 key_channel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_channel_)));
          set_has_key_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_has_key;
        break;
      }

      // optional bool has_key = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_key_)));
          set_has_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_filter;
        break;
      }

      // repeated .PS.FilterConfig filter = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_filter;
        if (input->ExpectTag(104)) goto parse_key_type;
        break;
      }

      // optional .PS.DataType key_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::DataType_IsValid(value)) {
            set_key_type(static_cast< ::PS::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_value_type;
        break;
      }

      // repeated .PS.DataType value_type = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::DataType_IsValid(value)) {
            add_value_type(static_cast< ::PS::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::PS::DataType_IsValid,
                 this->mutable_value_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_value_type;
        if (input->ExpectTag(122)) goto parse_task;
        break;
      }

      // repeated .PS.Task task = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_task;
        if (input->ExpectTag(128)) goto parse_more;
        break;
      }

      // optional bool more = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_more:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &more_)));
          set_has_more();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_msg;
        break;
      }

      // optional bytes msg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_ctrl;
        break;
      }

      // optional .PS.Control ctrl = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ctrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ctrl()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_param;
        break;
      }

      // optional .PS.ParamCall param = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_sgd;
        break;
      }

      // optional .PS.SGDCall sgd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sgd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sgd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_bcd;
        break;
      }

      // optional .PS.BCDCall bcd = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bcd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bcd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((800u <= tag && tag < 1600u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool control = 1 [default = false];
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->control(), output);
  }

  // optional bool request = 2 [default = false];
  if (has_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->request(), output);
  }

  // optional int32 customer_id = 3;
  if (has_customer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->customer_id(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // repeated int32 wait_time = 6;
  for (int i = 0; i < this->wait_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->wait_time(i), output);
  }

  // optional .PS.PbRange key_range = 7;
  if (has_key_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->key_range(), output);
  }

  // optional int32 key_channel = 8;
  if (has_key_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->key_channel(), output);
  }

  // optional bool has_key = 9 [default = false];
  if (has_has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->has_key(), output);
  }

  // repeated .PS.FilterConfig filter = 12;
  for (int i = 0; i < this->filter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->filter(i), output);
  }

  // optional .PS.DataType key_type = 13;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->key_type(), output);
  }

  // repeated .PS.DataType value_type = 14;
  for (int i = 0; i < this->value_type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->value_type(i), output);
  }

  // repeated .PS.Task task = 15;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->task(i), output);
  }

  // optional bool more = 16 [default = false];
  if (has_more()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->more(), output);
  }

  // optional bytes msg = 17;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->msg(), output);
  }

  // optional .PS.Control ctrl = 18;
  if (has_ctrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->ctrl(), output);
  }

  // optional .PS.ParamCall param = 20;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->param(), output);
  }

  // optional .PS.SGDCall sgd = 21;
  if (has_sgd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->sgd(), output);
  }

  // optional .PS.BCDCall bcd = 22;
  if (has_bcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->bcd(), output);
  }

  // Extension range [100, 200)
  _extensions_.SerializeWithCachedSizes(
      100, 200, output);

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool control = 1 [default = false];
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->control(), target);
  }

  // optional bool request = 2 [default = false];
  if (has_request()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->request(), target);
  }

  // optional int32 customer_id = 3;
  if (has_customer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->customer_id(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // repeated int32 wait_time = 6;
  for (int i = 0; i < this->wait_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->wait_time(i), target);
  }

  // optional .PS.PbRange key_range = 7;
  if (has_key_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->key_range(), target);
  }

  // optional int32 key_channel = 8;
  if (has_key_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->key_channel(), target);
  }

  // optional bool has_key = 9 [default = false];
  if (has_has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->has_key(), target);
  }

  // repeated .PS.FilterConfig filter = 12;
  for (int i = 0; i < this->filter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->filter(i), target);
  }

  // optional .PS.DataType key_type = 13;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->key_type(), target);
  }

  // repeated .PS.DataType value_type = 14;
  for (int i = 0; i < this->value_type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->value_type(i), target);
  }

  // repeated .PS.Task task = 15;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->task(i), target);
  }

  // optional bool more = 16 [default = false];
  if (has_more()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->more(), target);
  }

  // optional bytes msg = 17;
  if (has_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->msg(), target);
  }

  // optional .PS.Control ctrl = 18;
  if (has_ctrl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->ctrl(), target);
  }

  // optional .PS.ParamCall param = 20;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->param(), target);
  }

  // optional .PS.SGDCall sgd = 21;
  if (has_sgd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->sgd(), target);
  }

  // optional .PS.BCDCall bcd = 22;
  if (has_bcd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->bcd(), target);
  }

  // Extension range [100, 200)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 200, target);

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool control = 1 [default = false];
    if (has_control()) {
      total_size += 1 + 1;
    }

    // optional bool request = 2 [default = false];
    if (has_request()) {
      total_size += 1 + 1;
    }

    // optional int32 customer_id = 3;
    if (has_customer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->customer_id());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional .PS.PbRange key_range = 7;
    if (has_key_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key_range());
    }

    // optional int32 key_channel = 8;
    if (has_key_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_channel());
    }

    // optional bool has_key = 9 [default = false];
    if (has_has_key()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PS.DataType key_type = 13;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional bool more = 16 [default = false];
    if (has_more()) {
      total_size += 2 + 1;
    }

    // optional bytes msg = 17;
    if (has_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msg());
    }

    // optional .PS.Control ctrl = 18;
    if (has_ctrl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ctrl());
    }

    // optional .PS.ParamCall param = 20;
    if (has_param()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PS.SGDCall sgd = 21;
    if (has_sgd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sgd());
    }

    // optional .PS.BCDCall bcd = 22;
    if (has_bcd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bcd());
    }

  }
  // repeated int32 wait_time = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->wait_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->wait_time(i));
    }
    total_size += 1 * this->wait_time_size() + data_size;
  }

  // repeated .PS.DataType value_type = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->value_type(i));
    }
    total_size += 1 * this->value_type_size() + data_size;
  }

  // repeated .PS.FilterConfig filter = 12;
  total_size += 1 * this->filter_size();
  for (int i = 0; i < this->filter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filter(i));
  }

  // repeated .PS.Task task = 15;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  total_size += _extensions_.ByteSize();

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  wait_time_.MergeFrom(from.wait_time_);
  value_type_.MergeFrom(from.value_type_);
  filter_.MergeFrom(from.filter_);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control()) {
      set_control(from.control());
    }
    if (from.has_request()) {
      set_request(from.request());
    }
    if (from.has_customer_id()) {
      set_customer_id(from.customer_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_key_range()) {
      mutable_key_range()->::PS::PbRange::MergeFrom(from.key_range());
    }
    if (from.has_key_channel()) {
      set_key_channel(from.key_channel());
    }
    if (from.has_has_key()) {
      set_has_key(from.has_key());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_more()) {
      set_more(from.more());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_ctrl()) {
      mutable_ctrl()->::PS::Control::MergeFrom(from.ctrl());
    }
    if (from.has_param()) {
      mutable_param()->::PS::ParamCall::MergeFrom(from.param());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sgd()) {
      mutable_sgd()->::PS::SGDCall::MergeFrom(from.sgd());
    }
    if (from.has_bcd()) {
      mutable_bcd()->::PS::BCDCall::MergeFrom(from.bcd());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {

  if (has_key_range()) {
    if (!this->key_range().IsInitialized()) return false;
  }
  for (int i = 0; i < filter_size(); i++) {
    if (!this->filter(i).IsInitialized()) return false;
  }
  for (int i = 0; i < task_size(); i++) {
    if (!this->task(i).IsInitialized()) return false;
  }
  if (has_ctrl()) {
    if (!this->ctrl().IsInitialized()) return false;
  }
  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  if (has_sgd()) {
    if (!this->sgd().IsInitialized()) return false;
  }
  if (has_bcd()) {
    if (!this->bcd().IsInitialized()) return false;
  }

  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(control_, other->control_);
    std::swap(request_, other->request_);
    std::swap(customer_id_, other->customer_id_);
    std::swap(time_, other->time_);
    wait_time_.Swap(&other->wait_time_);
    std::swap(key_range_, other->key_range_);
    std::swap(key_channel_, other->key_channel_);
    std::swap(has_key_, other->has_key_);
    std::swap(key_type_, other->key_type_);
    value_type_.Swap(&other->value_type_);
    filter_.Swap(&other->filter_);
    std::swap(more_, other->more_);
    task_.Swap(&other->task_);
    std::swap(msg_, other->msg_);
    std::swap(ctrl_, other->ctrl_);
    std::swap(param_, other->param_);
    std::swap(sgd_, other->sgd_);
    std::swap(bcd_, other->bcd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Control_Command_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_Command_descriptor_;
}
bool Control_Command_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Control_Command Control::REQUEST_APP;
const Control_Command Control::REGISTER_NODE;
const Control_Command Control::REPORT_PERF;
const Control_Command Control::READY_TO_EXIT;
const Control_Command Control::ADD_NODE;
const Control_Command Control::UPDATE_NODE;
const Control_Command Control::REPLACE_NODE;
const Control_Command Control::REMOVE_NODE;
const Control_Command Control::EXIT;
const Control_Command Control::Command_MIN;
const Control_Command Control::Command_MAX;
const int Control::Command_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Control::kCmdFieldNumber;
const int Control::kNodeFieldNumber;
#endif  // !_MSC_VER

Control::Control()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Control::InitAsDefaultInstance() {
}

Control::Control(const Control& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Control::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Control::~Control() {
  SharedDtor();
}

void Control::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Control_descriptor_;
}

const Control& Control::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_system_2fproto_2ftask_2eproto();
  return *default_instance_;
}

Control* Control::default_instance_ = NULL;

Control* Control::New() const {
  return new Control;
}

void Control::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 1;
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PS.Control.Command cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PS::Control_Command_IsValid(value)) {
            set_cmd(static_cast< ::PS::Control_Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node;
        break;
      }

      // repeated .PS.Node node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_node;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PS.Control.Command cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // repeated .PS.Node node = 2;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->node(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Control::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PS.Control.Command cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // repeated .PS.Node node = 2;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->node(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Control::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PS.Control.Command cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

  }
  // repeated .PS.Node node = 2;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Control* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Control*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  return true;
}

void Control::Swap(Control* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    node_.Swap(&other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Control_descriptor_;
  metadata.reflection = Control_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

// @@protoc_insertion_point(global_scope)
